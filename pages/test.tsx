import Head from 'next/head'
import styles from '@/styles/test.module.sass'
import { assests } from '@/utils/utils';
import { BuildingType, assignColor } from '@/utils/builddingsApi';
import { useState } from 'react';

export default function Home() {
  return (
    <>
      <Head>
        <title>Mapa</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <BuildingsFilter/>
    </>
    )
}

{ /*props.buildings && props.buildings.length>1 &&
  <div className="referencesContainer" style={{backgroundColor:theme.primary}}>
      { buildingTypes.filter(type => getQuantityTypes(type)>0).map( reference => 
        <div key={reference} className="reference">
          <div onClick={() => toggleType(reference)} className="referencesSquare" style={ {borderColor:assignColor(reference),  backgroundColor: filteredTypes.includes(reference)?assignColor(reference):"transparent"}}>  </div>
          <p style={{color: assignColor(reference)}}>{reference}: {getQuantityTypes(reference)}</p>
        </div> )
      }
    </div>*/}
type BuildingFilterProps = {
  filteredTypes: any;
  setFilteredTypes: any;
  allTypes:any;
}
export const BuildingsFilter: React.FC<BuildingFilterProps> = ({filteredTypes, setFilteredTypes,allTypes}) => {
  function  getQuantityTypes(buildingType:BuildingType){
    let count = 0;
    allTypes.forEach((type:any) => {if( type==buildingType){count++}})
    return count
  }
    function toggleType(type:string){
        const index = filteredTypes.indexOf(type);
        if (index !== -1) {
          // El tipo ya está presente, lo eliminamos
          const updatedTypes = [...filteredTypes];
          updatedTypes.splice(index, 1);
          setFilteredTypes(updatedTypes);
          setFilteredTypes(updatedTypes);
        } else {
          // El tipo no está presente, lo insertamos
          setFilteredTypes([...filteredTypes, type]);
          setFilteredTypes([...filteredTypes, type]);
        }
      };

  return (            
    <div className={styles.filtersContainer}>
        <h3>Tipopologia edilica</h3>
        <div className={styles.typesConainer}>
            {assests.buildingTypes.filter(type => getQuantityTypes(type as BuildingType)>0).map( (type)  =>
                <div key={type} className="reference"  >
                    <div onClick={() => toggleType(type as BuildingType)} className="referencesSquare" style={ {borderColor:assignColor(type as BuildingType),  backgroundColor: filteredTypes.includes(type)?assignColor(type as BuildingType):"transparent"}}>  </div>
                    <p onClick={() => toggleType(type as BuildingType)} style={{cursor: 'pointer'}}>{type}</p>
                </div> 
                )}
        </div>
    </div>
  );
};

